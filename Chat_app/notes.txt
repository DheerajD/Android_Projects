################################Lecture-2################################### 

Create WelcomeActivity

Go to layout xml file and change layout to RelativeLayout.

Replace DarkActionBar with NoActionBar from styles.xml file. We don't need action bar at the top.

in colors.xml, replaced the values to my shades of blue. Just copy any color on google to get a shade. Select your colors from pallate.

I'll be working with Firebase database. For using firebase we need to have a gmail account.

Connect Android Studio to Gmail by logging in from Android studio. Small Icon at top right corner. Once we are logged in we can use Firebase database.

Click on Tools -> Firebase. This will open Firebase assistant.

In Firebase asistant. Select Authentication -> Email and password authentication.

Under email and pwd authentication tab -> Connect to Firebase -> opens a dailog box - connect to firebase.
This creates a firebase project inside a firebase database by the name of ChatApp. This completes the first step.

for Step 2, click on Add firebase authentication to your app. -> Accept changes.
This adds authentication dependencies inside our app.

Step 3 -> go back. Select realtime Database. Click on save and retrieve data.
Click on Add the Realtime Database to your App.

I got error : Failed to resolve: firebase-auth:16.0.1:15.0.0'
Replaced this with  firebase-auth:16.0.1. i.e. Write : implementation 'com.google.firebase:firebase-auth:16.0.1:15.0.0' 


Step 4-> Go back. Click on Cloud messaging. Setup firebase cloud messaging. Add FCM to your app.

basically added these to gradle file :  
    implementation 'com.google.firebase:firebase-auth:16.0.1'    
    implementation 'com.google.firebase:firebase-database:16.0.1'
    implementation 'com.google.firebase:firebase-messaging:17.0.0'






Now, go on browser. go to https://firebase.google.com/
On top right corner we have option "GO TO CONSOLE". Here we can see that our ChatApp Application is created successfully.

Select the application. On left panel, we have our Authentication, database options.

Click on Authentication - select "sign-in method".. This defines How we'll add sign in functionality to our system. 
sign-in method will also have other options to sign in, like sign in using google. sign in using facebook etc..We'll be using these as well in our chat application.


For now, we'll be working with email/pwd sign in.. click on email/pwd sign in and enable it. Email/pwd authentication is now enabled.



##################################Lecture 3 ##################################

In this we'll be adding a splash screen to our chatting application.. create an image which will be our splash screen. Add this img to drawable folder of our application.

Inside activity_welcome.xml, add the following line in our relative layout :
android:background="@drawable/chat_welcome_page"

After this add code in WelcomeActivity.java

	Thread thread = new Thread() {
            @Override
            public void run() {
                try {
                    sleep(3000);
                }catch (Exception e){
                    e.printStackTrace();
                }
                finally {
                   //Code to navigate to nect activity 
		    Intent mainIntent = new Intent(WelcomeActivity.this, ChatMainActivity.class);
                    startActivity(mainIntent);
                }
            }
        };
        thread.start();

Above code will displa the splash screen for 3 seconds.. i.e the activity will sleep for 3000milliseconds using a thread. 
Once 3 seconds are done we'll navigate to next activity. To navigate we'll write code in finally{} block.



Our next activity be ChatMainActivity.java. This would have 3 parts, one the header, then 3 tabs and then the list of all chats.
create new activity, ChatMainActivity. Change its layout to relativeLayout.


########################################Lecture 4 ####################################
We'll add user validations. If the user is valid/authorised, then only he'll be allowed to navigate to ChatMainActivity, else we'll give loggin error. 

;;;;;;;SOME PART REMAINING TO MAKE NOTES;;;;;;;;;;;;;;;;



#####################################Lecture 5 ##################################################

remove the textview added for demo purpose.
Now on StartPage, we'll add two  buttons, one for logging in and one for signing out. 
Create the 2 buttons, and do the required formatting.
Register the Buttons to java activity file.
When user clicks on Login activity, he is sent to login page. If he clicks on Signup, he is sent to SignUp activity.

add onClickListener for both the buttons. 

Create a new activity, LoginActivity, to allow existing user to login. First just add a text for testing. "This is login activity".
Similarly create a RegisterActivity/sign up activity


#####################################Lecture 6 #####################################################

In this lecture we'll modify the login and register page, to add UI, text boxes and signup/login functionality. Add textboxes on register page to take name, email and pwd as input.
Similarly do it for login page.

#####################################Lecture 7 #####################################################

    implementation 'com.android.support:design:28.0.0'

add this in gradle.build file

right click on "layout" folder in "res", click new, click "layout resource file". this is to create new layout resource file.
add name - app_bar_layout.xml. this is to add toolbar at the top, which would contain the heading and a back button.

Root element -> android.support.v7.widget.toolbar

in this new layout file, in root element modify : android:layout_height="wrap_content"

android:background="@color/colorPrimary"   

Go to Component tree section of IDE and select toolbar from there. We'll add ID of this toolbar, ID of this toolbar be "main_app_bar"

change theme of tool bar to ThemeOverlay.AppCompact.Dark.ActionBar



go to activity_main.xml to add this toolbar...
code to add toolbar :

<include layout="@layout/app_bar_layout"
        android:id="@+id/main_page_toolbar"/>

On java class side add the following code : 
	
	 mToolbar = (Toolbar)findViewById(R.id.main_page_toolbar);
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("ChatApp");


We also need to add this code on Login activity page.   

add following code to 

add following code in java class file :

mToolbar = (Toolbar)findViewById(R.id.login_toolbar);
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("Sign In");


add following code in layout file :
    <include layout="@layout/app_bar_layout"
        android:id="@+id/login_toolbar"/>



Along with the title we need to add back button :

go to AndroidManifest file and add a parent activity for login page. 
        <activity android:name=".LoginActivity"
            android:parentActivityName=".StartPageActivity"/>


In login activity, add a call to         getSupportActionBar().setDisplayHomeAsUpEnabled(true);
this would add a button to return to Home page on the left of icon.


Add action bar in register activity as well.

in layout file :
<include layout="@layout/app_bar_layout"
        android:id="@+id/register_toolbar"/>


in AndroidManifest file :

<activity android:name=".RegisterActivity"
            android:parentActivityName=".StartPageActivity"></activity>
 

















